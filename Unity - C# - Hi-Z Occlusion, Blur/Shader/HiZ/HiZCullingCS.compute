#include "UnityCG.cginc"

#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 32
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

struct OccludeeData
{
    float3 boundsCenter;         // 3
    float3 boundsExtents;        // 6
};

cbuffer CB
{
    uint _ShouldFrustumCull;
    uint _ShouldOcclusionCull;
    uint _ShouldDetailCull;
    uint _ShouldLOD;
    uint _ShouldOnlyUseLOD02Shadows;
    
    int _ShadowCascades;
    float _ShadowDistance;
    float _DetailCullingScreenPercentage;
    float2 _HiZTextureSize;
    float3 _CamPosition;
    
    float4x4 _UNITY_MATRIX_MVP;
    Texture2D<float4> _HiZMap;
    SamplerState sampler_HiZMap;
};

StructuredBuffer<OccludeeData> _OccludeeDataBuffer;
RWStructuredBuffer<uint> _IsVisibleBuffer;


inline uint IsCameraOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
    float boundsSize = distance(maxPos, minPos);
    return ((distance(pos, maxPos) > boundsSize)
            + (distance(pos, minPos) > boundsSize));
}

inline uint IsVisibleAfterDetailCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY)
{
    return saturate(
            (distance(clipMinX, clipMaxX) >= _DetailCullingScreenPercentage)
            + (distance(clipMinY, clipMaxY) >= _DetailCullingScreenPercentage)
    );
}

// Hi-Z Culling
inline uint IsVisibleAfterOcclusionCulling(OccludeeData occludee, float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ)
{
    // Change it to 0 - 1 range 
    float2 minXY = float2(clipMinX, clipMinY) * 0.5 + 0.5;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5 + 0.5;
    
    // Calculate hi-Z buffer mip
    int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
    float mip = ceil(log2(max(size.x, size.y)));
    mip = clamp(mip, 0, 10);
    
    // Texel footprint for the lower (finer-grained) level
    float  level_lower = max(mip - 1, 0);
    float2 scale = exp2(-level_lower);
    float2 a = floor(minXY * scale);
    float2 b = ceil(maxXY * scale);
    float2 dims = b - a;
    
    // Use the lower level if we only touch <= 2 texels in both dimensions
    if (dims.x <= 2 && dims.y <= 2)
    {
        mip = level_lower;
    }
    
    // find the max depth
    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    const   int   xSamples = 8;
    const   int   ySamples = 25;
    const  float    widthSS = (maxXY.x - minXY.x);
    const  float   heightSS = (maxXY.y - minXY.y);    
    const  float  maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);    
    const  float      stepX = widthSS / xSamples;    
    const  float      stepY = heightSS / ySamples;    
    
    float HIZdepth = 1;    
    float yPos = minXY.y;
    for(int y = 0; y < ySamples; ++y)
    {
        float xPos = minXY.x;
        for(int x = 0; x < xSamples; ++x)
        {
            const float2 nCoords0 = float2(xPos, yPos);
            HIZdepth = min(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
            xPos += stepX;
        }
        yPos += stepY;    
    }
    
    return (1.0 - clipMinZ) * 0.5 >= HIZdepth;
}

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w 
            || clipPos.x < -clipPos.w 
            || clipPos.x > clipPos.w 
            || clipPos.y < -clipPos.w 
            || clipPos.y > clipPos.w) 
            ? 0 : 1;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )
{
    // Calculate the instance index
    uint tID = _dispatchThreadID.x;
    uint vBufferID = tID / 4;
    uint byteIndex = (tID % 4);
    uint bitSteb = byteIndex * 8;

    // Reset the is visible state
    InterlockedAnd(_IsVisibleBuffer[vBufferID], ~(0xFF << bitSteb));

    // Get the instance data
    OccludeeData occludee = _OccludeeDataBuffer[tID];

    // Check if the instance is visible
    float3 minPos = occludee.boundsCenter - occludee.boundsExtents;
    float3 maxPos = occludee.boundsCenter + occludee.boundsExtents;

    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);

    float4 clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[0]);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);

    clipPos.xyz = clipPos.xyz / clipPos.w;
    float clipMinX = clipPos.x;
    float clipMaxX = clipPos.x;
    float clipMinY = clipPos.y;
    float clipMaxY = clipPos.y;
    float clipMinZ = clipPos.z;

    float minDistanceToCamera = distance(occludee.boundsCenter.xyz, _CamPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[i]);

        // For Frustum
        isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));

        // For HiZ
        clipPos.xyz = clipPos.xyz / clipPos.w;
        clipMinX = min(clipPos.x, clipMinX);
        clipMaxX = max(clipPos.x, clipMaxX);
        clipMinY = min(clipPos.y, clipMinY);
        clipMaxY = max(clipPos.y, clipMaxY);
        clipMinZ = min(clipPos.z, clipMinZ);

        // For LODing
        minDistanceToCamera = min(distance(boxCorners[i].xyz, _CamPosition.xyz), minDistanceToCamera);
    }

    // We only cull instances where the camera doesn't intersect the instance 
    // bounds. If the camera is inside the bounds we want to render the object
    uint isVisible = 1;
    if (IsCameraOutsideObjBounds(_CamPosition, minPos, maxPos))
    {
        // Do we pass the frustum culling...?
        isVisible *= _ShouldFrustumCull ? isInFrustum : 1;

        // Do we pass the occlusion culling...?
        isVisible *= (_ShouldOcclusionCull * isVisible > 0) ? IsVisibleAfterOcclusionCulling(occludee, clipMinX, clipMaxX, clipMinY, clipMaxY, clipMinZ) : 1;

        // // // Do we pass the detail (screen size) culling...?
        isVisible *= (_ShouldDetailCull * isVisible > 0) ? IsVisibleAfterDetailCulling(clipMinX, clipMaxX, clipMinY, clipMaxY) : 1;
    }

    InterlockedOr(_IsVisibleBuffer[vBufferID], (isVisible == 0 ? 0 : 1 + (tID % 4)) << bitSteb);
}